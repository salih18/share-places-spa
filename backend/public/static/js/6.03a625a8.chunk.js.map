{"version":3,"sources":["shared/component/UIElements/Card.js","shared/component/formElements/ImageUpload.js","users/pages/Auth.js"],"names":["Card","props","className","style","children","ImageUpload","pickedFile","id","center","onInput","errorText","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","fileIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","display","type","accept","onChange","event","target","files","length","src","alt","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMod","setIsLoginMod","useHttpClient","isLoading","error","sendRequest","clearError","useFrom","email","value","password","state","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","inputs","res","login","userId","token","formData","FormData","append","name","image","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/6.03a625a8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport \"./ImageUpload.css\";\r\nimport Button from \"./Button\";\r\nconst ImageUpload = ({ id, center, onInput, errorText }) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n  const filePickerRef = useRef();\r\n  let pickedFile;\r\n  let fileIsValid = isValid;\r\n\r\n  useEffect(() => {\r\n    if (!file) return;\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = event => {\r\n    if (event.target.files || event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    onInput(id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => filePickerRef.current.click();\r\n\r\n  return (\r\n    <div className='form-control'>\r\n      <input\r\n        ref={filePickerRef}\r\n        id={id}\r\n        style={{ display: \"none\" }}\r\n        type='file'\r\n        accept='.jpg,.png,.jpeg'\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${center && \"center\"}`}>\r\n        <div className='image-upload__preview'>\r\n          {previewUrl && <img src={previewUrl} alt='Preview' />}{\" \"}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type='button' onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useContext, Fragment } from \"react\";\r\nimport \"./Auth.css\";\r\nimport Input from \"../../shared/component/formElements/Input\";\r\nimport Button from \"../../shared/component/formElements/Button\";\r\nimport Card from \"../../shared/component/UIElements/Card\";\r\nimport ErrorModal from \"../../shared/component/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/component/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/component/formElements/ImageUpload\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport { useFrom } from \"../../shared/hooks/form-hook\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE\r\n} from \"../../shared/Util/validators\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMod, setIsLoginMod] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [state, inputHandler, setFormData] = useFrom(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n  const switchModelHandler = () => {\r\n    if (!isLoginMod) {\r\n      setFormData(\r\n        {\r\n          ...state.inputs,\r\n          name: undefined,\r\n          image: undefined\r\n        },\r\n        state.inputs.email.isValid && state.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...state.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false\r\n          }\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMod(prevMode => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async event => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMod) {\r\n      try {\r\n        const res = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: state.inputs.email.value,\r\n            password: state.inputs.password.value\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\"\r\n          }\r\n        );\r\n        auth.login(res.userId, res.token);\r\n      } catch (error) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", state.inputs.email.value);\r\n        formData.append(\"password\", state.inputs.password.value);\r\n        formData.append(\"name\", state.inputs.name.value);\r\n        formData.append(\"image\", state.inputs.image.value);\r\n\r\n        const res = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(res.userId, res.token);\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className='authentication'>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form className='place-form' onSubmit={authSubmitHandler}>\r\n          {!isLoginMod && (\r\n            <Input\r\n              id='name'\r\n              element='input'\r\n              type='text'\r\n              label='Your Name'\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText='Please enter a valid name'\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMod && (\r\n            <ImageUpload\r\n              center\r\n              id={\"image\"}\r\n              onInput={inputHandler}\r\n              errorText='Please provide an image'\r\n            />\r\n          )}\r\n          <Input\r\n            id='email'\r\n            element='input'\r\n            type='email'\r\n            label='Email'\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText='Please enter a valid email address'\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id='password'\r\n            element='input'\r\n            type='password'\r\n            label='Password'\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText='Please enter a valid password, at least 6 characters.'\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type='submit' disabled={!state.isValid}>\r\n            {isLoginMod ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModelHandler}>\r\n          SWITHC TO {isLoginMod ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}