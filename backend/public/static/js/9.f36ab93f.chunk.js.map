{"version":3,"sources":["shared/component/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","auth","useContext","AuthContext","placeId","useParams","history","useHistory","useHttpClient","isLoading","error","sendRequest","clearError","useState","place","setPlace","useFrom","title","value","isValid","description","state","inputHandler","setFormData","useEffect","a","process","data","getPlace","onClear","onSubmit","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","updatePlace","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initailValue","initailValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,gMCiIEC,UAzHK,WAClB,IAAMC,EAAOC,qBAAWC,KAElBC,EAAUC,cAAYD,QACtBE,EAAUC,cAJQ,EAM8BC,cAA9CC,EANgB,EAMhBA,UAAWC,EANK,EAMLA,MAAOC,EANF,EAMEA,YAAaC,EANf,EAMeA,WANf,EAOEC,qBAPF,mBAOjBC,EAPiB,KAOVC,EAPU,OAQmBC,YACzC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAnBsB,mBAQjBE,EARiB,KAQVC,EARU,KAQIC,EARJ,KA+CxB,GAzBAC,qBAAU,YACM,uCAAG,4BAAAC,EAAA,+EAEMd,EAAY,GAAD,OACzBe,0CADyB,mBACmBtB,IAHpC,OAEPuB,EAFO,OAKbZ,EAASY,EAAKb,OACdS,EACE,CACEN,MAAO,CACLC,MAAOS,EAAKb,MAAMG,MAClBE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAKb,MAAMM,YAClBD,SAAS,KAGb,GAjBW,yGAAH,qDAqBdS,KACC,CAACjB,EAAaP,EAASmB,IAEtBd,EACF,OACE,yBAAKZ,UAAU,UACb,kBAAC,IAAD,OAIN,IAAKiB,IAAUJ,EACb,OACE,yBAAKb,UAAU,UACb,kBAAC,IAAD,KACE,uDA4BR,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYa,MAAOA,EAAOmB,QAASjB,KACjCH,GAAaK,GACb,0BAAMjB,UAAU,aAAaiC,SA1BF,SAAAC,GAC/BA,EAAMC,iBACW,uCAAG,sBAAAP,EAAA,+EAEVd,EAAY,GAAD,OACZe,0CADY,mBACgCtB,GAC/C,QACA6B,KAAKC,UAAU,CACbjB,MAAOI,EAAMc,OAAOlB,MAAMC,MAC1BE,YAAaC,EAAMc,OAAOf,YAAYF,QAExC,CACE,eAAgB,mBAChBkB,cAAe,UAAYnC,EAAKoC,QAXpB,OAchB/B,EAAQgC,KAAK,IAAMrC,EAAKsC,OAAS,WAdjB,uGAAH,oDAiBjBC,KAQM,kBAAC,IAAD,CACEC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS1B,EACT2B,aAAcnC,EAAMG,MACpBiC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS1B,EACT2B,aAAcnC,EAAMM,YACpB8B,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASS,UAAW/B,EAAMF,SAAvC","file":"static/js/9.f36ab93f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, Fragment, useContext } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport Input from \"../../shared/component/formElements/Input\";\r\nimport Button from \"../../shared/component/formElements/Button\";\r\nimport Card from \"../../shared/component/UIElements/Card\";\r\nimport LoadingSpinner from \"../../shared/component/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/component/UIElements/ErrorModal\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from \"../../shared/Util/validators\";\r\nimport { useFrom } from \"../../shared/hooks/form-hook\";\r\n\r\nconst UpdatePlace = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const placeId = useParams().placeId;\r\n  const history = useHistory();\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [place, setPlace] = useState();\r\n  const [state, inputHandler, setFormData] = useFrom(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const getPlace = async () => {\r\n      try {\r\n        const data = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        setPlace(data.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: data.place.title,\r\n              isValid: true\r\n            },\r\n            description: {\r\n              value: data.place.description,\r\n              isValid: true\r\n            }\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n    getPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  if (isLoading)\r\n    return (\r\n      <div className='center'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n\r\n  if (!place && !error) {\r\n    return (\r\n      <div className='center'>\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const placeUpdateSubmitHandler = event => {\r\n    event.preventDefault();\r\n    const updatePlace = async () => {\r\n      try {\r\n        await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n          \"PATCH\",\r\n          JSON.stringify({\r\n            title: state.inputs.title.value,\r\n            description: state.inputs.description.value\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: \"Bearer \" + auth.token\r\n          }\r\n        );\r\n        history.push(\"/\" + auth.userId + \"/places\");\r\n      } catch (error) {}\r\n    };\r\n    updatePlace();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && place && (\r\n        <form className='place-form' onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id='title'\r\n            element='input'\r\n            type='text'\r\n            label='Title'\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText='Please enter a valid title.'\r\n            onInput={inputHandler}\r\n            initailValue={place.title}\r\n            initailValid={true}\r\n          />\r\n          <Input\r\n            id='description'\r\n            element='textarea'\r\n            label='Description'\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText='Please enter a valid description (min. 5 characters).'\r\n            onInput={inputHandler}\r\n            initailValue={place.description}\r\n            initailValid={true}\r\n          />\r\n          <Button type='submit' disabled={!state.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"],"sourceRoot":""}